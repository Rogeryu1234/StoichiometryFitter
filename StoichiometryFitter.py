#!/usr/bin/env python
# -*- coding: US-ASCII -*-
#
# generated by wxGlade 0.6.8 on Thu Mar  6 15:07:47 2014
#

import wx
from numpy import *
import os

# begin wxGlade: dependencies
import gettext
# end wxGlade

import PhysicsBasics as pb
import CountsToQuant

wx.SystemOptions.SetOption('mac.listctrl.always_use_generic', '1')

# begin wxGlade: extracode
from wx.lib.mixins.listctrl import TextEditMixin

class EditableTextListCtrl(wx.ListCtrl, TextEditMixin):
    def __init__(self, parent, ID, pos=wx.DefaultPosition,
                size=wx.DefaultSize, style=0):
        wx.ListCtrl.__init__(self, parent, ID, pos, size, style)
        TextEditMixin.__init__(self)
# end wxGlade

    EditableColumns = None
    def SetEditableColumns(self, ColNums=None):
        self.EditableColumns = ColNums

    # This opens when the user edits an item in the ListCtrl.
    def OpenEditor(self, col, row):
        # The only editable entry is column 1 (counts for a given element.)
        if col in self.EditableColumns:
            super(EditableTextListCtrl, self).OpenEditor(col, row)



class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_4 = wx.Panel(self, wx.ID_ANY)
        self.ElementsListCtrl = EditableTextListCtrl(self.panel_4, wx.ID_ANY, style=wx.LC_REPORT | wx.LC_EDIT_LABELS | wx.LC_SINGLE_SEL | wx.SUNKEN_BORDER | wx.FULL_REPAINT_ON_RESIZE)
        self.rdioInputType = wx.RadioBox(self.panel_4, wx.ID_ANY, _("Input Type"), choices=[_("Counts"), _("At %"), _("Wt %")], majorDimension=0, style=wx.RA_SPECIFY_ROWS)
        self.btnReset = wx.Button(self.panel_4, wx.ID_ANY, _("Reset"))
        self.PhasesListCtrl = EditableTextListCtrl(self, wx.ID_ANY, style=wx.LC_REPORT | wx.SUNKEN_BORDER)
        self.panel_1 = wx.Panel(self, wx.ID_ANY)
        self.panel_2 = wx.Panel(self.panel_1, wx.ID_ANY)
        self.chkAbsCorr = wx.CheckBox(self.panel_1, wx.ID_ANY, "")
        self.txtAbsCorr = wx.TextCtrl(self.panel_1, wx.ID_ANY, "")
        self.label_1 = wx.StaticText(self.panel_1, wx.ID_ANY, _("g/cm3 * nm"))
        self.sizer_3_staticbox = wx.StaticBox(self.panel_1, wx.ID_ANY, _("TEM Thickness Correction"))
        self.chkKfacs = wx.CheckBox(self.panel_1, wx.ID_ANY, "")
        self.comboKfacs = wx.ComboBox(self.panel_1, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN | wx.CB_READONLY)
        self.sizer_4_staticbox = wx.StaticBox(self.panel_1, wx.ID_ANY, _("Apply k-factors for:"))
        self.chkOByStoichiometry = wx.CheckBox(self.panel_1, wx.ID_ANY, "")
        self.comboStoich = wx.ComboBox(self.panel_1, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN | wx.CB_READONLY)
        self.sizer_5_staticbox = wx.StaticBox(self.panel_1, wx.ID_ANY, _("Oxygen by stoichiometry?"))
        self.btnGo = wx.Button(self.panel_1, wx.ID_ANY, _("Go!"))
        self.panel_3 = wx.Panel(self.panel_1, wx.ID_ANY)
        self.text_ctrl_1 = wx.TextCtrl(self, wx.ID_ANY, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_RADIOBOX, self.OnInputType, self.rdioInputType)
        self.Bind(wx.EVT_BUTTON, self.OnReset, self.btnReset)
        self.Bind(wx.EVT_CHECKBOX, self.OnStoichSelect, self.chkOByStoichiometry)
        self.Bind(wx.EVT_COMBOBOX, self.OnStoichSelect, self.comboStoich)
        self.Bind(wx.EVT_BUTTON, self.OnGo, self.btnGo)
        # end wxGlade

        # Make sure the window never gets too small to see the controls.
        self.SetMinSize((650, 500))

        # Set up the initial conditions for the frame.
        self.InitControls()

        # Catch the frame closing event so we can ask if we want to save.
        self.Bind(wx.EVT_CLOSE, self.OnClose)

        self.Layout()

    def OnClose(self, evt):
        """OnClose(self, evt): Ask the user if he wants to save before closing.  Not yet implemented."""
        # it = self.ElementsListCtrl.GetItem(0,1)
        # print it.GetText()
        self.Destroy()

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle(_("Stoichiometry Fitter"))
        self.SetSize((1118, 615))
        self.ElementsListCtrl.SetMinSize((200, 100))
        self.rdioInputType.SetMinSize((200,100))
        self.rdioInputType.SetSelection(0)
        self.btnReset.SetMinSize((200,20))
        self.panel_4.SetMinSize((200, -1))
        self.PhasesListCtrl.SetMinSize((300, -1))
        self.chkOByStoichiometry.SetValue(1)
        self.panel_1.SetMinSize((250, -1))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.FlexGridSizer(1, 1, 0, 0)
        sizer_2 = wx.FlexGridSizer(1, 4, 0, 0)
        grid_sizer_1 = wx.FlexGridSizer(6, 1, 0, 0)
        sizer_7 = wx.BoxSizer(wx.VERTICAL)
        self.sizer_5_staticbox.Lower()
        sizer_5 = wx.StaticBoxSizer(self.sizer_5_staticbox, wx.HORIZONTAL)
        self.sizer_4_staticbox.Lower()
        sizer_4 = wx.StaticBoxSizer(self.sizer_4_staticbox, wx.HORIZONTAL)
        self.sizer_3_staticbox.Lower()
        sizer_3 = wx.StaticBoxSizer(self.sizer_3_staticbox, wx.HORIZONTAL)
        sizer_6 = wx.FlexGridSizer(2, 1, 0, 0)
        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9.Add(self.ElementsListCtrl, 0, wx.ALL | wx.EXPAND, 2)
        sizer_6.Add(sizer_9, 0, wx.EXPAND, 0)
        sizer_10.Add(self.rdioInputType, 0, wx.EXPAND, 0)
        sizer_6.Add(sizer_10, 0, wx.EXPAND, 0)
        sizer_8.Add(self.btnReset, 0, wx.ALL | wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL, 2)
        sizer_6.Add(sizer_8, 0, wx.EXPAND, 0)
        self.panel_4.SetSizer(sizer_6)
        sizer_6.AddGrowableRow(0)
        sizer_2.Add(self.panel_4, 0, wx.EXPAND, 0)
        sizer_2.Add(self.PhasesListCtrl, 0, wx.ALL | wx.EXPAND, 2)
        grid_sizer_1.Add(self.panel_2, 1, wx.EXPAND, 0)
        sizer_3.Add(self.chkAbsCorr, 0, 0, 0)
        sizer_3.Add(self.txtAbsCorr, 0, wx.EXPAND, 0)
        sizer_3.Add(self.label_1, 0, 0, 0)
        grid_sizer_1.Add(sizer_3, 1, wx.EXPAND, 0)
        sizer_4.Add(self.chkKfacs, 0, 0, 0)
        sizer_4.Add(self.comboKfacs, 0, wx.ALL | wx.EXPAND, 2)
        grid_sizer_1.Add(sizer_4, 1, wx.EXPAND, 0)
        sizer_5.Add(self.chkOByStoichiometry, 0, 0, 0)
        sizer_5.Add(self.comboStoich, 0, wx.ALL | wx.EXPAND, 2)
        grid_sizer_1.Add(sizer_5, 1, wx.EXPAND, 0)
        sizer_7.Add(self.btnGo, 0, wx.ALL | wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 2)
        grid_sizer_1.Add(sizer_7, 1, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.panel_3, 1, wx.EXPAND, 0)
        self.panel_1.SetSizer(grid_sizer_1)
        grid_sizer_1.AddGrowableRow(0)
        grid_sizer_1.AddGrowableRow(5)
        grid_sizer_1.AddGrowableCol(0)
        sizer_2.Add(self.panel_1, 0, wx.EXPAND, 0)
        sizer_2.Add(self.text_ctrl_1, 1, wx.ALL | wx.EXPAND, 2)
        sizer_2.AddGrowableRow(0)
        sizer_2.AddGrowableCol(1)
        sizer_2.AddGrowableCol(3)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.AddGrowableRow(0)
        sizer_1.AddGrowableCol(0)
        self.Layout()
        # end wxGlade

    def LoadStoichiometryFile(self):
        # Load the stoichiometry list.  It's two column.  First is the element name.  Second is the atom's charge.
        # The converter removes ensures we have floats.
        try:
            self.Stoich = genfromtxt('ConfigData/Stoich ' + self.comboStoich.StringSelection + '.csv', dtype=None,
                                     comments='#', delimiter=',', skip_header=1, converters={1: lambda s: float(s)})
        except:
            ReportError('Could not read stoichiometry file.')

    def InitControls(self):
        """InitControls(self):
        Fills in the Elements list, sets up checkboxes, and fills in the phases list.
        """

        """ PHASES LIST CONTROL"""
        # Initialize the Phases list control.
        self.PhasesListCtrl.InsertColumn(0, 'Phase')

        # Load the list of phases.  It's two column.  First is the human name for the phase.  Second is the formula in the format 'Si1 O2' for SiO2.
        # The converter removes whitespace from the formula column so we can have variable column widths.
        self.Phases = genfromtxt('ConfigData/Phases.csv', dtype=None, comments='#', delimiter=',',
                                 converters={1: lambda s: str(s).lstrip()})

        # Now loop through each one, and add it to the phases list box.
        i = 0
        for Phase, Formula in self.Phases:
            self.PhasesListCtrl.InsertStringItem(i, Phase)
            i += 1

        # Make sure the column is wide enough to show everything.
        self.PhasesListCtrl.SetColumnWidth(0, 300)

        """ POPULATE KFACS PULLDOWN """
        for file in os.listdir('ConfigData'):
            if file.startswith('kfacs') and file.endswith('.csv'):
                kfacsname = file.split('kfacs ')[1].split('.csv')[0]
                self.comboKfacs.Append(kfacsname)
        self.comboKfacs.Select(0)
        # For counts we will want the kfactors.
        self.chkKfacs.SetValue(True)

        """ POPULATE THE INPUT SOURCE """
        # Start with counts as the selected item.
        self.rdioInputType.SetSelection(0)

        """ POPULATE THE STOICHIOMETRY FITTER """
        for file in os.listdir('ConfigData'):
            if file.startswith('stoich') and file.endswith('.csv'):
                stoichname = file.split('stoich ')[1].split('.csv')[0]
                self.comboStoich.Append(stoichname)
        self.comboStoich.Select(0)
        # Default to using O by stoichiometry.
        self.chkOByStoichiometry.SetValue(True)

        self.LoadStoichiometryFile()

        """ ELEMENTS LIST CONTROL"""
        #Initialize the Elements list control.  Add a row for every element.
        self.ElementsListCtrl.InsertColumn(0, 'Element')
        self.ElementsListCtrl.SetColumnWidth(0, 60)
        self.ElementsListCtrl.InsertColumn(1, 'Counts')
        self.ElementsListCtrl.SetColumnWidth(1, 60)
        self.ElementsListCtrl.InsertColumn(2, 'Charge') # Used for stoichiometry calculation.
        self.ElementsListCtrl.SetColumnWidth(2, 60)
        for Z in range(1, pb.MAXELEMENT - 1):
            self.ElementsListCtrl.InsertStringItem(Z - 1, pb.ElementalSymbols[Z])
            self.ElementsListCtrl.SetStringItem(Z - 1, 1, '0')
        # The stoichometry column is separately populated by this function...
        self.OnStoichSelect(None)


    def OnReset(self, event):  # wxGlade: MyFrame.<event_handler>
        """OnReset(self, event):
            Set all the elements back to zero so the user can type in a new sample.
        """
        for Z in range(1, pb.MAXELEMENT - 1):
            self.ElementsListCtrl.SetStringItem(Z - 1, 1, '0')
        event.Skip()

    def OnGo(self, event):  # wxGlade: MyFrame.<event_handler>
        # Sometimes the person doesn't hit enter after editing a value in the ElementsListControl.  In this case,
        # we need to end his edit or the value doesn't get saved.
        self.ElementsListCtrl.CloseEditor(None)

        # Extract the counts vector out of the ElementsListControl.
        # Z-1 since H=1 is the first atom, and the list is zero based.
        self.Counts = zeros(pb.MAXELEMENT)
        for Z in range(1, pb.MAXELEMENT - 1):
            self.Counts[Z-1] = float(self.ElementsListCtrl.GetItem(Z - 1,1).GetText())

        # Find out if there is a k-factor file to use.
        if self.chkKfacs.IsChecked():
            kfacsfile = self.comboKfacs.StringSelection
        else:
            kfacsfile = None

        # Find out if there is an absorption correction to do.
        AbsorptionCorrection = 0
        if self.chkAbsCorr.IsChecked():
            try:
                AbsorptionCorrection = float(self.txtAbsCorr.GetString(0,-1))
            except:
                wx.MessageBox('Absorption Correction is not a valid number.', 'Please correct input:')
                return

        # Find out if we are using oxygen by stoichiometry
        if self.chkOByStoichiometry.IsChecked():
            # Stoich is a list of tuples.  We want an array from the 1 index of the tuples.  So unzip the list into two tuples,
            # choose the tuple which corresponds to the charges not the atom names and feed it to numpy to make a vector.
            OByStoich = array(zip(*self.Stoich)[1])
        else:
            OByStoich = None

        Quant = CountsToQuant.GetAbundancesFromCounts(self.Counts, kfacsfile=kfacsfile, InputType=self.rdioInputType.StringSelection, AbsorptionCorrection=0, OByStoichiometry=OByStoich)
        print Quant
        event.Skip()

    def OnInputType(self, event):  # wxGlade: MyFrame.<event_handler>
        # By default, we use kfacs for counts.  At%and Wt% don't.
        if self.rdioInputType.GetSelection() == 0:
            self.chkKfacs.SetValue(True)
        else:
            self.chkKfacs.SetValue(False)

        # Get the column which is labeled Counts or At % or Wt %.
        col = self.ElementsListCtrl.GetColumn(1)
        # Depending on which radio is checked, choose the right text.
        if self.rdioInputType.GetSelection() == 0:
            col.SetText('Counts')
        elif self.rdioInputType.GetSelection() == 1:
            col.SetText('At %')
        else:
            col.SetText('Wt %')
        # And stuff that modified column back into the ListBox.
        self.ElementsListCtrl.SetColumn(1, col)
        event.Skip()
        
    def OnStoichSelect(self, event):  # wxGlade: MyFrame.<event_handler>
        # It doesn't matter what the user did.  If they changed any stoichometry settings, we do it all from scratch.
        self.LoadStoichiometryFile()

        # If we are not using oxygen by stoichometry, then mark out the stoichiometry column.
        if self.chkOByStoichiometry.IsChecked() == False:
            for Z in range(1, pb.MAXELEMENT):
                self.ElementsListCtrl.SetStringItem(Z-1, 2, 'n/a')
            # Make sure the user can only edit the counts column.
            self.ElementsListCtrl.SetEditableColumns((1, ))
        else:
            # If we are using it then we populate it from the self.Stoich variable read by LoadStoichiometryFile
            # Since that was a csv, we have a list of tuples like [('H', 1), ('He', 2), ...]  So index to the right tuple
            # [Z-1] and then into the tuple [Z-1][1]
            for Z in range(1, pb.MAXELEMENT):
                self.ElementsListCtrl.SetStringItem(Z-1, 2, str(self.Stoich[Z-1][1]))
            # The user can edit the counts column and the stoichiometry column.
            self.ElementsListCtrl.SetEditableColumns((1,2))

        if event != None:
            event.Skip()

# end of class MyFrame

if __name__ == "__main__":
    gettext.install("app")  # replace with the appropriate catalog name

    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = MyFrame(None, wx.ID_ANY, "")
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()